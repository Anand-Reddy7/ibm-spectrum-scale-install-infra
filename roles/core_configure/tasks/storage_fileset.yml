---

##################### Fileset configuration For CES Nodes #####################

# First verifing if fileset already exists if not then creating Independent fileset linking it and printing it.

- name: config | Create a list of configuration parameters for filesets
  set_fact:
    config_filset: >
      {%- set config_filset = [] -%}
      {%- for storage in scale_storage -%}
        {%- for fileset_name, quota in storage.filesets.items() -%}
          {{ config_filset.append({
            'filesystem': storage.filesystem,
            'fileset_name': fileset_name,
            'quota': quota,
            'defaultMountPoint': storage.defaultMountPoint
          }) }}
        {%- endfor -%}
      {%- endfor -%}
      {{ config_filset }}
  run_once: true

- name: debug | Display scale_storage content
  debug:
    var: config_filset
  run_once: true
    
- name: Fileset Creation
  block:  ## run_once: true

  - name: storage | Find existing filesystem(s)
    shell: /usr/lpp/mmfs/bin/mmlsfs all -Y | grep -v HEADER | cut -d ':' -f 7 | uniq
    register: scale_storage_existing_fs
    changed_when: false
    failed_when: false

  - name: Debug the Filesystem name
    debug:
      var: scale_storage_existing_fs.stdout
    ignore_errors: yes

  - name: Check if fileset in filesystem already exists
    shell: "/usr/lpp/mmfs/bin/mmlsfileset {{ item.filesystem }} | tail -n +3 | awk '{print $1}' | grep -w {{ item.fileset_name }}"
    loop: "{{ config_filset }}"
    loop_control:
      label: "{{ item.filesystem }}: {{ item.fileset_name }}"
    register: filesets_result
    failed_when: false

  - name: Print return code for each fileset
    debug:
      msg: "Fileset {{ item.item.fileset_name }} - Return Code: {{ item.rc }}"
    loop: "{{ filesets_result.results }}"
    loop_control:
      label: "{{ item.item.filesystem }}: {{ item.item.fileset_name }}"

  - name: Create new fileset
    shell: "/usr/lpp/mmfs/bin/mmcrfileset {{ item.item.filesystem }} {{ item.item.fileset_name }} --inode-space new"
    loop: "{{ filesets_result.results }}"
    loop_control:
      label: "{{ item.item.filesystem }}: {{ item.item.fileset_name }}"
    register: created_fileset
    when: item.rc != 0

  - name: Print return code for created filesets
    debug:
      msg: "Fileset {{ item.item.item.fileset_name }} in {{ item.item.item.filesystem }} - Return Code: {{ item.item.rc }}"
    loop: "{{ created_fileset.results }}"
    loop_control:
      label: "{{ item.item.stdout }}"

  - name: Link new fileset
    shell: "/usr/lpp/mmfs/bin/mmlinkfileset {{ item.item.item.filesystem }} {{ item.item.item.fileset_name }} -J {{ item.item.item.defaultMountPoint }}/{{ item.item.item.fileset_name }}"
    register: link_fileset
    loop: "{{ created_fileset.results }}"
    loop_control:
      label: "{{ item.item.stdout }}"
    when: item.changed == true

  - name: Check filesets with its links in the filesystem
    command: /usr/lpp/mmfs/bin/mmlsfileset {{ item.item.item.item.filesystem }}
    register: linked_filesets
    loop: "{{ link_fileset.results }}"
    loop_control:
      label: "{{ item.item.item.stdout }}"

  - name: Debug the filesets with its link in the filesystem
    debug:
      msg: "{{ item.stdout_lines }}"
    loop: "{{ linked_filesets.results }}"
    loop_control:
      label: "{{ item.item.item.item.stdout_lines }}"

  run_once: true

# Setting up quota for filesets

- name: Quota allocation for filesets
  block:  ## run_once: true
  - name: Check quota is already enabled
    shell: "/usr/lpp/mmfs/bin/mmlsfs {{ item.item.item.filesystem }} -Y | grep -w 'quotasAccountingEnabled' | grep -w 'user;group;fileset'"
    loop: "{{ created_fileset.results }}"
    loop_control:
      label: "{{ item.item.stdout }}"
    register: check_quota_enabled
    failed_when: check_quota_enabled.rc == 2
    when: item.item.item.quota > 0

  - name: Debug to check if quota is already enabled
    debug:
      msg: >
        Quota check for {{ item.item.item.item.filesystem }}:
        {{ 'Quota enabled' if item.stdout_lines else 'Quota not enabled' }}
    loop: "{{ check_quota_enabled.results }}"
    loop_control:
      label: "{{ item.item.item.item.filesystem }}"
    when: item.item.item.item.quota > 0

  - name: Run mmchfs command and enable quota
    shell: "/usr/lpp/mmfs/bin/mmchfs {{ item.item.item.filesystem }} -Q yes --perfileset-quota"
    register: enable_quota
    loop: "{{ created_fileset.results }}"
    loop_control:
      label: "{{ item.item.stdout }}"
    when: item.item.item.quota > 0 and item.item.rc != 0

  - name: Run mmcheckquota command
    shell: "/usr/lpp/mmfs/bin/mmcheckquota {{ item.item.item.item.filesystem }}"
    register: quota_check
    loop: "{{ check_quota_enabled.results }}"
    loop_control:
      label: "{{ item.item.item.item.filesystem }}"
    when: item.changed == true

  - name: Debug the mmcheckquota command
    debug:
      msg: "mmcheckquota Check: {{ item.stdout_lines }}"
    ignore_errors: yes
    loop: "{{ quota_check.results }}"
    when: item.changed == true

  - name: Check if quota for fileset is already set
    shell: "/usr/lpp/mmfs/bin/mmlsquota -j {{ item.item.item.fileset_name }} -Y {{ item.item.item.filesystem }} | grep -v HEADER | cut -d ':' -f 13"
    loop: "{{ created_fileset.results }}"
    register: existing_quota_details
    loop_control:
      label: "{{ item.item.stdout }}"
    when: item.item.item.quota > 0

  - name: Debug if quota for fileset is already set
    debug:
      msg: "Fileset name: {{ item.item.item.item.fileset_name }}  Quota allocated: {{ item.item.item.item.quota }}"
    loop: "{{ existing_quota_details.results }}"
    loop_control:
      label: "{{ item.item.item.item.filesystem }}"
    when: item.item.item.item.quota > 0

  - name: Run mmsetquota command
    shell: "/usr/lpp/mmfs/bin/mmsetquota {{ item.item.item.item.filesystem }}:{{ item.item.item.item.fileset_name }} --block {{ (item.item.item.item.quota * 0.8) | int }}g:{{ item.item.item.item.quota }}g"
    register: set_quota
    loop: "{{ existing_quota_details.results }}"
    loop_control:
      label: "{{ item.item.item.item.filesystem }}"
    when: item.item.item.item.quota > 0 and item.stdout | int == 0

  - name: Run mmlsquota command
    shell: "/usr/lpp/mmfs/bin/mmlsquota -j {{ item.item.item.item.item.fileset_name }} {{ item.item.item.item.item.filesystem }}"
    register: quota_details
    loop: "{{ set_quota.results }}"
    loop_control:
      label: "{{ item.item.item.item.item.filesystem }}"
    when: item.item.item.item.item.quota > 0 

  - name: Debug the after setting quota
    debug:
      msg: "{{ item.stdout_lines }}"
    loop: "{{ quota_details.results }}"
    loop_control:
      label: "{{ item.item.item.item.item.item.filesystem }}"
    when: item.item.item.item.item.item.quota > 0 

  run_once: true

- name: Update permissions for userinput filesets
  shell: >
    find {{ item.defaultMountPoint }}/{{ item.fileset_name }} -type d ! -path '{{ item.defaultMountPoint }}/{{ item.fileset_name }}/.snapshots' -exec chmod 777 {} +
  loop: "{{ config_filset }}"
  loop_control:
    label: "{{ item.defaultMountPoint }}: {{ item.fileset_name }}"
  run_once: true

  #when: scale_storage[0].filesets is defined   Check on this and mmcheckquota command